public class Homework9{
    public static TreeNode lowestCommonAncestor(TreeNode root, TreeNode p, TreeNode q) {
        if ((p.val < root.val) && (q.val < root.val)) {
            //the thing that's being returned is on the left side
            return lowestCommonAncestor(root.left, p, q);
                //therefore ONLY search through the left subtree
        }
        else if ((p.val > root.val) && (q.val > root.val)) {
            //the thing that's being returned is on the right side
            return lowestCommonAncestor(root.right, p, q);
                //therefore ONLY search through the right subtree
        }
        else {
            return root;
            //this is because if "p" or "q" is equal to the root, the root has to be returned
            //this is also true if "p" is less than the root and if "q" is greater than the root
            //because they have to originate from the root
        }
    }

    public static void main(String[] args) {
        TreeNode leftLeft = new TreeNode(8);
        TreeNode leftRight = new TreeNode(9);
        TreeNode rightLeft = new TreeNode(5);
        TreeNode rightRight = new TreeNode(9);

        TreeNode leftSubTree = new TreeNode(10, leftLeft, leftRight);
        TreeNode rightSubTree = new TreeNode(8, rightLeft, rightRight);

        TreeNode root = new TreeNode(4, leftSubTree, rightSubTree);
        
        //Test Cases
        TreeNode p = new TreeNode(1);
        TreeNode q = new TreeNode(3);
        
        //Test Cases
        //TreeNode p = new TreeNode(1);
        //TreeNode q = new TreeNode(5);

        System.out.println("The root is " + root.val);
        System.out.println("The value of p is " + p.val);
        System.out.println("The value of q is " + q.val);
        System.out.println("The lowest common ancestor is " + lowestCommonAncestor(root, p, q).val);
    }
}
