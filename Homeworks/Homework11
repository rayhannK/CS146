package Homework;

import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;
import java.util.Queue;
import java.util.Arrays;

public class Homework11 {
    public static int[][] floodFill(int[][] image, int sr, int sc, int color) {
        //List<int[]> visited = new ArrayList<>();
        boolean[][] visited = new boolean[image.length][image[0].length];
        Queue<int[]> queue = new LinkedList<>();
        List<int[]> neighbors = new ArrayList<>();

        //perform BFS
        for (int i = 0; i < image.length; i++) {
            for (int j = 0; j < image[i].length; j++) {
                if (i == sr && j == sc) {
                    //image[i][j] is at the starting thing...
                    int originalVal = image[sr][sc];
                    //we have this because image[sr][sc] already changed and we need the original value in order to
                    // compare each point
                    queue.add(new int[]{sr, sc});
                    visited[sr][sc] = true;
                    image[sr][sc] = color;

                    while (!queue.isEmpty()) {
                        int[] curr = queue.poll();
                        int currX = curr[1];
                        int currY = curr[0];

                        //this way, we can update the x and y coordinates with the changing curr
                        
                        if (((currX - 1) >= 0 && image[currY][currX - 1] == originalVal) ||
                                ((currX - 1) >= 0 && image[currY][currX - 1] == color)) { //leftPoint
                            neighbors.add(new int[]{currY, currX - 1});
                            image[currY][currX - 1] = color;
                        }
                        if (((currX + 1) < image[0].length && image[currY][currX + 1] == originalVal) ||
                                ((currX + 1) < image[0].length && image[currY][currX + 1] == color)) { //rightPoint
                            neighbors.add(new int[]{currY, currX + 1});
                            image[currY][currX + 1] = color;
                        }
                        if (((currY - 1) >= 0 && image[currY - 1][currX] == originalVal) ||
                                ((currY - 1) >= 0 && image[currY - 1][currX] == color)) { //upPoint
                            neighbors.add(new int[]{currY - 1, currX});
                            image[currY - 1][currX] = color;
                        }
                        if (((currY + 1) < image.length && image[currY + 1][currX] == originalVal) ||
                                ((currY + 1) < image.length && image[currY + 1][currX] == color)) { //downPoint
                            neighbors.add(new int[]{currY + 1, currX});
                            image[currY + 1][currX] = color;
                        }

                        for (int k = 0; k < neighbors.size(); k++) {
                            int kX = neighbors.get(k)[1]; //column
                            int kY = neighbors.get(k)[0]; //row

                            if (!visited[kY][kX]) {
                                visited[kY][kX] = true;
                                queue.add(neighbors.get(k));
                            }
                        }

                        neighbors.clear();
                    }
                }
            }
        }
        return image;
    }

    public static void main(String[] args) {
        int[][] image = {
                {1, 1, 1},
                {1, 1, 0},
                {1, 0, 1}
        };
        int[][] output = floodFill(image, 1, 1, 2);

        for (int i = 0; i < output.length; i++) {
            // Iterate over each column of the current row
            for (int j = 0; j < output[i].length; j++) {
                // Print the element at row i and column j
                System.out.print(output[i][j] + " ");
            }
            System.out.println();
        }
    }
}
