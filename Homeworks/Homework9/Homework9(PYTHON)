class TreeNode(object):

    def __init__(self, val=0, left=None, right=None):
        self.val = val

        self.left = left

        self.right = right

    def lowestCommonAncestor(self, root: 'TreeNode', p: 'TreeNode', q: 'TreeNode') -> 'TreeNode':
        if (p.val < root.val) and (q.val < root.val):
            #if true --> the ancestor has to be returned from the left side
            return self.lowestCommonAncestor(root.left, p, q)
                #therefore, ONLY search through the left subtree
        elif (p.val > root.val) and (q.val > root.val):
            #if true --> the ancestor has to be returned from the right side
            return self.lowestCommonAncestor(root.right, p, q)
                #therefore, ONLY search through the right subtree
        else:
            #if it doesn't fit the specified requirements, return the root
            return root

leftLeft = TreeNode(1)
leftRight = TreeNode()
rightLeft = TreeNode(5)
rightRight = TreeNode(9)

leftSubTree = TreeNode(3, leftLeft, leftRight)
rightSubTree = TreeNode(8, rightLeft, rightRight)
root = TreeNode(4)

tree = TreeNode(4, leftSubTree, rightSubTree)

#Test Cases
p = TreeNode(5)
q = TreeNode(1)

#Test Cases
#p = TreeNode(1)
#q = TreeNode(3)

print("the value of p is", p.val)
print("the value of q is", q.val)
print("the value of the root is", root.val)

print("The lowest common ancestor is", tree.lowestCommonAncestor(tree, p, q).val)
