package Labs;

import Labs.TreeNode.TreeNode;

import java.util.Stack;

public class Lab5 {
    public static boolean isValidBST(TreeNode root) {
        //OR you can push all the elements in the LEFT subtree in a stack
            //if any element is GREATER THAN the root --> return false
        //& you can push all the elements in the RIGHT subtree in a stack
            //if any element is LESS THAN the root --> return true
        Stack<TreeNode> leftSubTree = new Stack<>();
        Stack<TreeNode> rightSubTree = new Stack<>();
        Stack<TreeNode> stackLeft = new Stack<>();
        Stack<TreeNode> stackRight = new Stack<>();

        if (root.left.val < root.val) {
            stackLeft.push(root.left);
            //this ensures that the left child of the root is less than the root
        }
        else {
            return false;
        }
        while (!stackLeft.isEmpty()) {
            TreeNode currLeft = stackLeft.pop();
            leftSubTree.push(currLeft);

            if (currLeft.left == null || currLeft.right == null) {
                if (currLeft.left != null) {
                    if (currLeft.left.val > currLeft.val) {
                        return false;
                    }
                    else {
                        leftSubTree.push(currLeft.left);
                    }
                }
                else {
                    if (currLeft.right.val < currLeft.val) {
                        return false;
                    }
                    else {
                        leftSubTree.push(currLeft.right);
                    }
                }
            }
            else {
                if (currLeft.left.val > currLeft.val) {
                    return false;
                }
                else {
                    leftSubTree.push(currLeft.left);
                }
                if (currLeft.right.val < currLeft.val) {
                    return false;
                }
                else {
                    leftSubTree.push(currLeft.right);
                }
            }
        }

        if (root.right.val > root.val) {
            stackRight.push(root.right);
            //this ensures that the right child of the root is greater than the root
        }
        else {
            return false;
        }
        while (!stackRight.isEmpty()) {
            TreeNode currRight = stackRight.pop();
            rightSubTree.push(currRight);

            if (currRight.left == null || currRight.right == null) {
                if (currRight.left != null) {
                    if (currRight.left.val > currRight.val) {
                        return false;
                    }
                    else {
                        rightSubTree.push(currRight.left);
                    }
                }
                else {
                    if (currRight.right.val < currRight.val) {
                        return false;
                    }
                    else {
                        rightSubTree.push(currRight.right);
                    }
                }
            }
            else {
                if (currRight.left.val > currRight.val) {
                    return false;
                }
                else {
                    rightSubTree.push(currRight.left);
                }
                if (currRight.right.val < currRight.val) {
                    return false;
                }
                else {
                    rightSubTree.push(currRight.right);
                }
            }
        }

        for (TreeNode treeNode : leftSubTree) {
            if (treeNode.val > root.val) {
                return false;
            }
        }

        for (TreeNode treeNode : rightSubTree) {
            if (treeNode.val < root.val) {
                return false;
            }
        }

        return true;
    }

    public static void main(String[] args) {
//        TreeNode leftLeft = new TreeNode(1);
//        //TreeNode leftRight = new TreeNode();
//        TreeNode rightLeft = new TreeNode(5);
//        TreeNode rightRight = new TreeNode(9);
//
//        TreeNode leftSubTree = new TreeNode(3, leftLeft, null);
//        TreeNode rightSubTree = new TreeNode(8, rightLeft, rightRight);
//        TreeNode tree = new TreeNode(4, leftSubTree, rightSubTree);

        TreeNode leftLeft = new TreeNode(3);
        TreeNode leftRight = new TreeNode(7);
        TreeNode rightRight = new TreeNode(20);

        TreeNode leftSubTree = new TreeNode(5, leftLeft, leftRight);
        TreeNode rightSubTree = new TreeNode(15, null, rightRight);
        TreeNode tree = new TreeNode(10, leftSubTree, rightSubTree);

        System.out.println("The root is this: " + tree.val);
        System.out.println("Valid BST Tree: " + isValidBST(tree));
    }
}
