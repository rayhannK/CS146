I don't know if this works for every case, but it works with the given test cases...

One thing about my approach is that it doesn't implement the topological sort approach...
The thing about this problem is that it's trying to detect a cycle within the graph
  If there's a cycle in the graph, it's impossible to fulfill those courses...

We could try to implement a topological sort approach...
  My first idea was to do a BFS or DFS approach to detect a cycle...
  BUT I noticed a little pattern in the adjacency matrix of a graph WITH a cycle...
    If there's a TRUE value that's diagonally next to ANOTHER TRUE value, it's a cycle...
      (or at least that's what I saw from the test cases)...

SO...here's my approach for both JAVA and Python...
  1. Create an adjacency matrix of the prerequisites
  2. Once you have that, loop through the matrix
  3. Check the boundaries of the point...
    If it fits AND it's diagonally adjacent to a TRUE value, return FALSE
    This is because we detected a cycle...
  4. If there's nothing else, return TRUE...
